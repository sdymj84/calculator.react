{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","numbers","operators","history","result","calculatedResult","getLastNumber","arrNumber","_this","split","slice","length","pop","makeHistory","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","operator","value","replace","err","return","fixFloatError","x","Number","toFixed","updateDisplay","lastNumber","setState","updateHistory","updateDisplayWithCal","y","console","log","onButtonClick","clickedButton","String","search","clickedNumber","currentNumber","concat","push","toString","match","clickedOperator","react_default","a","createElement","className","App_Display","this","App_ButtonSet","Component","Display","props","ButtonSet","keys","map","buttonSet","index","key","button","i","App_Button","number","Button","onClick","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c69d3c18.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    numbers: \"\",\n    operators: [],\n    history: \"\",\n    result: 0,\n    calculatedResult: 0,\n  }\n\n  getLastNumber = () => {\n    const arrNumber = this.state.numbers.split(\",\")\n    if (this.state.numbers.slice(-1) === \",\") {\n      return arrNumber[arrNumber.length - 2]\n    } else {\n      return arrNumber.pop()\n    }\n  }\n\n  makeHistory = (numbers, operators) => {\n    for (let operator of operators) {\n      numbers = numbers.replace(\",\", \" \" + operator + \" \")\n    }\n    return numbers\n  }\n\n  fixFloatError = x => {\n    return Number(x.toFixed(8).slice(0, 14))\n  }\n\n  updateDisplay = () => {\n    const lastNumber = this.getLastNumber()\n    this.setState(state => ({\n      history: this.makeHistory(state.numbers, state.operators),\n      result: (lastNumber) ? lastNumber : 0,\n    }))\n  }\n\n  updateHistory = () => {\n    this.setState(state => ({\n      history: this.makeHistory(state.numbers, state.operators),\n    }))\n  }\n\n  updateDisplayWithCal = () => {\n    this.setState(state => {\n      const operators = state.operators\n      const x = Number(state.calculatedResult)\n      const y = Number(this.getLastNumber())\n      const history = this.makeHistory(state.numbers, state.operators)\n\n      if (operators.length === 1) {\n        return {\n          history: this.makeHistory(state.numbers, state.operators),\n          calculatedResult: y,\n          result: y,\n        }\n      }\n\n      switch (operators[operators.length - 2]) {\n        case \"+\":\n          return {\n            history: history,\n            calculatedResult: this.fixFloatError(x + y),\n            result: this.fixFloatError(x + y),\n          }\n        case \"-\":\n          return {\n            history: history,\n            calculatedResult: this.fixFloatError(x - y),\n            result: this.fixFloatError(x - y),\n          }\n        case \"x\":\n          return {\n            history: history,\n            calculatedResult: this.fixFloatError(x * y),\n            result: this.fixFloatError(x * y),\n          }\n        case \"/\":\n          return {\n            history: history,\n            calculatedResult: this.fixFloatError(x / y),\n            result: this.fixFloatError(x / y),\n          }\n        case \"%\":\n          return {\n            history: history,\n            calculatedResult: this.fixFloatError(x % y),\n            result: this.fixFloatError(x % y),\n          }\n        default:\n          console.log(\"take care of unhandled button\")\n          break\n      }\n    }, () => {\n      const operators = this.state.operators\n      if (operators[operators.length - 1] === '=') {\n        this.setState(state => ({\n          numbers: \"\",\n          operators: [],\n          history: \"\",\n        }))\n      }\n    })\n  }\n\n  onButtonClick = (clickedButton) => {\n    // if clicked \"AC\" button\n    if (clickedButton === \"AC\") {\n      this.setState({\n        numbers: \"\",\n        operators: [],\n        history: \"\",\n        result: 0,\n        calculatedResult: 0,\n      }, this.updateDisplay)\n    }\n\n    // if clicked a NUMBER\n    else if (String(clickedButton).search(\"[0-9]\") >= 0) {\n      let clickedNumber = clickedButton\n      let currentNumber = 0\n      this.setState(state => {\n        // to prevent leading zeros in number\n        // - convert the last input number to Number from String\n        // - and replace it to current last number which is String\n        currentNumber = Number(this.getLastNumber() + clickedNumber)\n        const arrNumber = state.numbers.split(\",\")\n\n        if (state.numbers.slice(-1) === \",\") {\n          return { numbers: state.numbers.concat(clickedNumber) }\n        } else {\n          arrNumber.pop()\n          arrNumber.push(currentNumber)\n          return { numbers: arrNumber.toString() }\n        }\n      }, this.updateDisplay)\n    }\n\n    // if clicked a POINT (.)\n    else if (clickedButton.search(\"[.]\") >= 0) {\n      if (this.getLastNumber().match(\"[.]\")) {\n        return\n      }\n      this.setState(state => ({\n        numbers: state.numbers.concat(\".\"),\n      }), this.updateDisplay)\n    }\n\n    // if clicked a OPERATOR\n    else {\n      let clickedOperator = clickedButton\n      if (this.state.numbers[this.state.numbers.length - 1] === \",\" &&\n        clickedOperator !== \"=\") {\n        this.setState(state => ({\n          operators: state.operators.slice(0, -1).concat(clickedOperator)\n        }), this.updateHistory)\n      } else {\n        this.setState(state => ({\n          operators: state.operators.concat(clickedOperator),\n          // if first input is operator : \n          //   store result in numbers so continue calculation after result\n          numbers: (state.numbers === \"\") ?\n            String(state.result).concat(\",\") :\n            (clickedOperator === \"=\") ? state.numbers : state.numbers.concat(\",\"),\n        }), this.updateDisplayWithCal)\n      }\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"calculator\">\n          <Display history={this.state.history}\n            result={this.state.result} />\n          <ButtonSet onButtonClick={this.onButtonClick} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Display = (props) => {\n  return (\n    <div className=\"display\">\n      <div className=\"display_history\">\n        {props.history}\n      </div>\n      <div className={String(props.result).length > 7 ?\n        \"display_current-value_sm\" :\n        \"display_current-value\"}>\n        {props.result}\n      </div>\n    </div >\n  )\n}\n\nconst ButtonSet = (props) => {\n  return (\n    <div className=\"btn btn-group-vertical p-1 button-set\">\n      {ButtonSet.keys.map((buttonSet, index) =>\n        <div key={index} className=\"btn btn-group p-0\">\n          {ButtonSet.keys[index].map((button, i) =>\n            <Button key={i} onButtonClick={props.onButtonClick}\n              number={button} className={(i === 0 && (index === 0 || index === 4)) ?\n                \"button two-button\" : \"button\"} />\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nButtonSet.keys = [\n  [\"AC\", \"%\", \"/\"],\n  [1, 2, 3, \"x\"],\n  [4, 5, 6, \"-\"],\n  [7, 8, 9, \"+\"],\n  [0, \".\", \"=\"]\n]\n\nconst Button = (props) => {\n  return (\n    <button className={props.className}\n      onClick={() => props.onButtonClick(props.number)}>\n      {props.number}\n    </button>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}